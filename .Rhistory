runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(shinyWidgets)
library(shinyvalidate)
library(bslib)
library(bsplus)
library(tidyverse)
library(plotly)
library(gt)
library(broom)
### Accordion selectors for challenge 3
accordion_selectors <- accordion(
accordion_panel(
"Setosa", icon = bsicons::bs_icon("sliders"),
sliderInput("intercept_a3", "What is the intercept for Setosa?",
min = -.01, max = 5, value = 0, step = .1),
br(),
sliderInput("slope_a3", "What is the slope for Setosa?",
min = -2, max = 2, value = 0, step = 0.1),
br()
),
accordion_panel(
"Versicolor", icon = bsicons::bs_icon("sliders"),
sliderInput("intercept_b3", "What is the intercept for Versicolor?",
min = -.01, max = 5, value = 0, step = .1),
br(),
sliderInput("slope_b3", "What is the slope for Versicolor?",
min = -2, max = 2, value = 0, step = 0.1),
br()
),
accordion_panel(
"Virginica", icon = bsicons::bs_icon("sliders"),
sliderInput("intercept_c3", "What is the intercept for Virginica?",
min = -.01, max = 5, value = 0, step = .1),
br(),
sliderInput("slope_c3", "What is the slope for Virginica?",
min = -2, max = 2, value = 0, step = 0.1),
br()
)
)
ui <- page_navbar(
## Challenge Title
title = "Regression Challenge",
fillable = FALSE,
nav_spacer(),
nav_panel(
title = "First Challenge",
fillable = FALSE,
card(
card_header("Challenge 1"),
card_body(markdown("Here is the regression model for this challenge:
<br>
-   `lm(Petal.Length ~ Sepal.Width , data = iris)`
Everything is almost ready to go, but unfortunately our plot is broken!
<br>
<br>
We need your help to correctly set the the regression line of the plot, using the **sliders** and the **summary table**."))
),
## Sidebar panel for challenge 1 inputs ----
layout_sidebar(
sidebar = sidebar(
# intercept slider
sliderInput("intercept", "What is the intercept?",
min = .0, max = 10, value = 0, step = .1),
# br() to bring extra vertical spacing
br(),
# slope slider
sliderInput("slope", "What is the slope?",
min = -3, max = 3, value = 0, step = 0.1)
),
# Main panel for displaying outputs
# Output: A tabset that contains a table panel and plot panel
navset_card_underline(
id = "nav_tab_1",
title = "Broken Plot",
# Plot Panel
nav_panel("Broken Plot",
plotlyOutput("Plot")
),
# Regression Table Panel
nav_panel("Regression Results",
tableOutput("summary_table")
),
# Submit Button Panel
nav_panel("Check Plot",
actionButton(inputId = "check_answer1",
label = "Check the Plot",icon("edit"))
)
)
))
,
## Challenge_2
nav_panel(
title = "Challenge 2",
card(
card_header("Challenge 2"),
card_body(markdown(
"Those of you with the keen eye will have noticed that perhaps a negative association isn't quite the best fit across the 3 species. Let's see what happens when we account for these species in the regression model!
<br>
<br>
Interpreting the data for this model will be a little trickier, as we are working `Species`, which is categorical. Behind the scenes in analyses of these sorts, categorical variables are dummy coded (i.e., **1** for `Setosa`, **0** for **not** `Setosa`). The regression table will show you the change that occurs as each layer goes from **0** to **1** (That is, think of the named species in the table as being relative to *reference* species).
<br>
<br>
Considering that `virginica` and `versicolour` are in the regression table for `Species`, think about how you might interpret the `intercept` value and what it might represent in this context.
<br>
<br>
Here is the regression model used for this challenge:
-   `lm(Petal.Length ~ Sepal.Width + Species, data = iris)`
The challenge here is to set the slope and intercept values for the above regression model using the **summary table** and the **sliders**:"
))),
layout_sidebar(
sidebar = sidebar(
# intercept slider
sliderInput("intercept_a2", "What is the intercept for Setosa?",
min = -1, max = 5, value = 0, step = .1),
# br() for vertical line break
br(),
sliderInput("intercept_b2", "What is the intercept for Versicolor?",
min = -1, max = 5, value = 0, step = .1),
# br() for vertical line break
br(),
sliderInput("intercept_c2", "What is the intercept for Virginica?",
min = -1, max = 5, value = 0, step = .1),
# br() for vertical line break
br(),
sliderInput("slope_a2", "What is the slope?",
min = -2, max = 2, value = 0, step = 0.1)
),
# Main panel for displaying outputs
# Output: A tabset that contains a table panel and plot panel
navset_card_underline(
id = "nav_tab_2",
title = "The Second Broken Plot",
# Plot Panel
nav_panel("Broken Plot #2",
plotlyOutput("Plot2")
),
# Regression Table Panel
nav_panel("Regression Results",
tableOutput("summary_table2")
),
# Submit Button Panel
nav_panel("Check Plot",
actionButton(inputId = "check_answer2",
label = "Check the Plot",icon("edit"))
)
)
)
),
#### Multiple choice Q's
nav_panel(
title = "Challenge 3",
card_header("So what is the association between Sepal Width and Petal Length?"),
card_body(
markdown("With a keen eye may have noticed that we contradictory associations between `Sepal.Width` and `Petal.Length` in our analyses... Under some circumstances it's negative, and in others it's positive. This leads us to the important question of how should we interpret this?")
),
nav_panel(radioButtons("radio_1",
label = markdown("Q1) What is the association between `Sepal.Width` and `Petal.Length`?"),
width = "800px",
choices = list(
'Positive' = "Positive" ,
'Negative' = "Negative",
'It depends...' = "It depends..." ,
'There is no association' = "There is no association",
textOutput("txt")
)),
br(),
# br(),
actionButton(inputId = "check_answer_q1",
label = "submit",icon("edit") ),
)
),
#### Challenge 4 UI
nav_panel(
title = "Challenge 4",
card(
card_header("Challenge 4"),
card_body(markdown(
"Looks like we're getting closer to understanding the data. However, it is odd that every `species` has the same slope. And because every `species` has its own slope, poor `Setosa` is defying all laws of nature as it somehow predicting it to have a **negative** `Petal.Length` until the `Sepal.Width` grows beyond ***0.4mm***.(Go on - check by hovering the mouse cursor on the `orange` regression line from Challenge 2).
<br>
<br>
To resolve these strange predictions, the model has been set with an interaction. This gives every `species` it's own slope. Your task is to use the regression table to set the slope and intercept for all **3** of the flower species.
<br>
<br>
Here is the regression model for this challenge:
-   `lm(Petal.Length ~ Sepal.Width * Species, data = iris)`
Here you will need to compare the `Species` level variables to the reference level of the `intercept`, as well as comparing the interaction terms to the `Sepal.Width`. When reading a regression table that includes a *continuous* * *categorical* interaction, the coefficent value of our *continuous* predictor variable will only apply to the **reference** value of our *categorical* variable. To help, think of the named species and interaction terms as values that are *relative* to the **intercept** and to `Sepal.Width`. You will need to do some some manual calculating here - simple addition is all you need.
<br>
<br>
Set the *slope* and *intercept* for each *species* using the **regression table** and the **sliders**:"
))),
layout_sidebar(
## Challenge Title
title = "Challenge 3",
## Sidebar panel for plot inputs ----
sidebar = sidebar(accordion_selectors),
# Main panel for displaying outputs
# Output: A tabset that contains a table panel and plot panel
navset_card_underline(
id = "nav_tab_3",
title = "The Third Broken Plot",
# Plot Panel
nav_panel("Broken Plot #3",
plotlyOutput("Plot3")
),
# Regression Table Panel
nav_panel("Regression Results",
tableOutput("summary_table3")
),
# Submit Button Panel
nav_panel("Check Plot",
actionButton(inputId = "check_answer3",
label = "Check the Plot",icon("edit"))
)
)
)
)
)
ui <- page_navbar(
## Challenge Title
title = "Regression Challenge",
fillable = FALSE,
nav_spacer(),
nav_panel(
title = "First Challenge",
fillable = FALSE,
card(
card_header("Challenge 1"),
card_body(markdown("Here is the regression model for this challenge:
<br>
-   `lm(Petal.Length ~ Sepal.Width , data = iris)`
Everything is almost ready to go, but unfortunately our plot is broken!
<br>
<br>
We need your help to correctly set the the regression line of the plot, using the **sliders** and the **summary table**."))
),
## Sidebar panel for challenge 1 inputs ----
layout_sidebar(
sidebar = sidebar(
# intercept slider
sliderInput("intercept", "What is the intercept?",
min = .0, max = 10, value = 0, step = .1),
# br() to bring extra vertical spacing
br(),
# slope slider
sliderInput("slope", "What is the slope?",
min = -3, max = 3, value = 0, step = 0.1)
),
# Main panel for displaying outputs
# Output: A tabset that contains a table panel and plot panel
navset_card_underline(
id = "nav_tab_1",
title = "Broken Plot",
# Plot Panel
nav_panel("Broken Plot",
plotlyOutput("Plot")
),
# Regression Table Panel
nav_panel("Regression Results",
tableOutput("summary_table")
),
# Submit Button Panel
nav_panel("Check Plot",
actionButton(inputId = "check_answer1",
label = "Check the Plot",icon("edit"))
)
)
))
,
## Challenge_2
nav_panel(
title = "Challenge 2",
card(
card_header("Challenge 2"),
card_body(markdown(
"Those of you with the keen eye will have noticed that perhaps a negative association isn't quite the best fit across the 3 species. Let's see what happens when we account for these species in the regression model!
<br>
<br>
Interpreting the data for this model will be a little trickier, as we are working `Species`, which is categorical. Behind the scenes in analyses of these sorts, categorical variables are dummy coded (i.e., **1** for `Setosa`, **0** for **not** `Setosa`). The regression table will show you the change that occurs as each layer goes from **0** to **1** (That is, think of the named species in the table as being relative to *reference* species).
<br>
<br>
Considering that `virginica` and `versicolour` are in the regression table for `Species`, think about how you might interpret the `intercept` value and what it might represent in this context.
<br>
<br>
Here is the regression model used for this challenge:
-   `lm(Petal.Length ~ Sepal.Width + Species, data = iris)`
The challenge here is to set the slope and intercept values for the above regression model using the **summary table** and the **sliders**:"
))),
layout_sidebar(
sidebar = sidebar(
# intercept slider
sliderInput("intercept_a2", "What is the intercept for Setosa?",
min = -1, max = 5, value = 0, step = .1),
# br() for vertical line break
br(),
sliderInput("intercept_b2", "What is the intercept for Versicolor?",
min = -1, max = 5, value = 0, step = .1),
# br() for vertical line break
br(),
sliderInput("intercept_c2", "What is the intercept for Virginica?",
min = -1, max = 5, value = 0, step = .1),
# br() for vertical line break
br(),
sliderInput("slope_a2", "What is the slope?",
min = -2, max = 2, value = 0, step = 0.1)
),
# Main panel for displaying outputs
# Output: A tabset that contains a table panel and plot panel
navset_card_underline(
id = "nav_tab_2",
title = "The Second Broken Plot",
# Plot Panel
nav_panel("Broken Plot #2",
plotlyOutput("Plot2")
),
# Regression Table Panel
nav_panel("Regression Results",
tableOutput("summary_table2")
),
# Submit Button Panel
nav_panel("Check Plot",
actionButton(inputId = "check_answer2",
label = "Check the Plot",icon("edit"))
)
)
)
),
#### Multiple choice Q's
nav_panel(
title = "Challenge 3",
card_header("So what is the association between Sepal Width and Petal Length?"),
card_body(
markdown("With a keen eye may have noticed that we contradictory associations between `Sepal.Width` and `Petal.Length` in our analyses... Under some circumstances it's negative, and in others it's positive. This leads us to the important question of how should we interpret this?")
),
nav_panel(radioButtons("radio_1",
label = markdown("Q1) What is the association between `Sepal.Width` and `Petal.Length`?"),
width = "800px",
choices = list(
'Positive' = "Positive" ,
'Negative' = "Negative",
'It depends...' = "It depends..." ,
'There is no association' = "There is no association",
textOutput("txt")
)),
# br(),
actionButton(inputId = "check_answer_q1",
label = "submit",icon("edit") ),
)
),
#### Challenge 4 UI
nav_panel(
title = "Challenge 4",
card(
card_header("Challenge 4"),
card_body(markdown(
"Looks like we're getting closer to understanding the data. However, it is odd that every `species` has the same slope. And because every `species` has its own slope, poor `Setosa` is defying all laws of nature as it somehow predicting it to have a **negative** `Petal.Length` until the `Sepal.Width` grows beyond ***0.4mm***.(Go on - check by hovering the mouse cursor on the `orange` regression line from Challenge 2).
<br>
<br>
To resolve these strange predictions, the model has been set with an interaction. This gives every `species` it's own slope. Your task is to use the regression table to set the slope and intercept for all **3** of the flower species.
<br>
<br>
Here is the regression model for this challenge:
-   `lm(Petal.Length ~ Sepal.Width * Species, data = iris)`
Here you will need to compare the `Species` level variables to the reference level of the `intercept`, as well as comparing the interaction terms to the `Sepal.Width`. When reading a regression table that includes a *continuous* * *categorical* interaction, the coefficent value of our *continuous* predictor variable will only apply to the **reference** value of our *categorical* variable. To help, think of the named species and interaction terms as values that are *relative* to the **intercept** and to `Sepal.Width`. You will need to do some some manual calculating here - simple addition is all you need.
<br>
<br>
Set the *slope* and *intercept* for each *species* using the **regression table** and the **sliders**:"
))),
layout_sidebar(
## Challenge Title
title = "Challenge 3",
## Sidebar panel for plot inputs ----
sidebar = sidebar(accordion_selectors),
# Main panel for displaying outputs
# Output: A tabset that contains a table panel and plot panel
navset_card_underline(
id = "nav_tab_3",
title = "The Third Broken Plot",
# Plot Panel
nav_panel("Broken Plot #3",
plotlyOutput("Plot3")
),
# Regression Table Panel
nav_panel("Regression Results",
tableOutput("summary_table3")
),
# Submit Button Panel
nav_panel("Check Plot",
actionButton(inputId = "check_answer3",
label = "Check the Plot",icon("edit"))
)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
forgetDeployment()
runApp()
rsconnect::setAccountInfo(name='hiss-r-resources',
token='AC82C7F0E4C5EA8605B0EFC9CDCDDBF4',
secret='4HZEn1GfxvLscoxMoWGG6AgpoqvRBoXDfAIQ5ATA')
runApp()
runApp()
runApp()
runApp()
runApp()
options(repos = BiocManager::repositories())
install.packages("BiocManager")
options(repos = BiocManager::repositories())
install.packages("shinyvalidate")
shiny::runApp()
runApp('C:/Users/Rhys Davies/AppData/Local/Temp/c34cea83-4f7c-400d-8665-e0b1ed15b56b_011e8fe3d5be48548d06ec64882eacb6.tar.tar.56b')
